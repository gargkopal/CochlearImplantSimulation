function A = finalTask3(file)


% A program to read these files (or some of these files) into Matlab and find their sampling rate.

filename = file;
[y,Fs] = audioread(filename);     %read the audio file, where y returns sample data and Fs returns sampling rate for that data
info = audioinfo(filename);     
if Fs ~= 16000   
    yResample = resample(y, 16000, Fs);  %resamples y to p/q --> 16000/Fs
end

% Using size to check whether the input sound is stereo (2 channels/columns) or mono (1
% channel/column). If stereo, add the two columns to make it single channel (or a 1-column array).
[m,n] = size(yResample)  % From audioread y output argument, y will be an m-by-n matrix, where m is the number of audio samples read and n is the number of
% audio channels in the file. So if n is greater than one, then you have multiple channels

% Convert to mono
if n==2 
colOne = yResample(1:end,1);
colTwo  = yResample(1:end,2);
yResample = colOne + colTwo;
end


% Play the sound in Matlab.
sound(y, Fs);

% Write the sound to a new file.
audiowrite('newfile.wav', yResample, 16000);

% Plot the sound waveform of one of your sound files as a function of the sample number.
plot(yMono)

% % Generate a signal using the cosine function (cos) that oscillates at 1 kHz with the same time duration
% % and array length as the input signal. Play the sound generated by signal and plot two cycles of its waveform as a function of time.
timeVal = (0:m)/16000;   % m is the number of audio sample read, as in the array length. Divide by 16000 to get the time duration of the audio (1 s is 16000Hz)
cosine = cos(2*pi*timeVal*1000);   % amplitude is 1kHz
% plot(timeVal(1:33),cosine(1:33))    %want two periods, therefore 32kHz

%sampling frequency of the sound (resampled to this in taks 3)
fs = 16000;
d = 8000; %half the sampling frequency used to convert to Pi rad/sample

%the resampled sound data
data = yResample;

%for loop that generates different cut off frequencies starting at 100Hz
%and up to 8kHz at equall spaced distances of g
w(1)=100;
g = (7900/23);
for i=1:23
   w(i+1)=(w(i)+g);
end

%function created that combines the tasks of phases 2 and 3 in order to
%simplify the testing process
function channel = filter(lowFreq,highFreq,data)
    %butterworth bandpass filters used to make the bank at different cut-off
    %frequencies with order 3 which was choosen because it provided the
    %best output signal with the least processing time. 
    [b,a] = butter(3,[lowFreq/d highFreq/d]);
    %builtin MATLAB filters used with butterworh to filter the input signal
    band = filtfilt(b,a,data);
    %low pass filter with cut-off frequency of 50, determined to be the
    %best through iterations of testing
    [lowB,lowA] = butter(3, 50/d);
    %rectifying the output signal of the bandpass filters
    rectifyBand = abs(band);
    %filtering the rectified signal using the low pass filter
    absLow = filtfilt(lowB,lowA,rectifyBand);
    %env = envelope(absLow); %envelope of the signal not used because it
    %porved to be very noisy
    t = 1:length(absLow);
    center = sqrt((lowFreq/d)*(highFreq/d)); %calculates the centeral frequency of the bandpass filters
    cosSignal = cos(2*pi*t*center); %generates a cos signal that revolves around the central frequency
    cosSignal = transpose(cosSignal);
    channel = cosSignal.*absLow; %performs amplitude modulation to give the outcome of the channel
end

%calls the function to create different channels at different cut off
%frequencies with equal bandwidth

channel1 = filter(w(1),w(2),data);%lowest frequency filter
channel2 = filter(w(2),w(3),data);
channel3 = filter(w(3),w(4),data);
channel4 = filter(w(4),w(5),data);
channel5 = filter(w(5),w(6),data);
channel6 = filter(w(6),w(7),data);
channel7 = filter(w(7),w(8),data);
channel8 = filter(w(8),w(9),data);
channel9 = filter(w(9),w(10),data);
channel10 = filter(w(10),w(11),data);
channel11 = filter(w(11),w(12),data);
channel12 = filter(w(12),w(13),data);
channel13 = filter(w(13),w(14),data);
channel14 = filter(w(14),w(15),data);
channel15 = filter(w(15),w(16),data);
channel16 = filter(w(16),w(17),data);
channel17 = filter(w(17),w(18),data);
channel18 = filter(w(18),w(19),data);
channel19 = filter(w(19),w(20),data);
channel20 = filter(w(20),w(21),data);
channel21 = filter(w(21),w(22),data);
channel22 = filter(w(22),w(23),data);

%combines all the channels to provide the output signal
newSignal = channel1+channel2+channel3+channel4+channel5+channel6
+channel7+channel8+channel9+channel10+channel11+channel12+channel13
+channel14+channel15+channel16+channel17+channel18+channel19+channel20
+channel21+channel22;

%normalizes the overall output signal using its maximum value
maxVal = max(newSignal);
normSound = (1/maxVal).*newSignal;

%plots the output signal aganist the original signal
figure
plot(t,normSound),xlabel('Frequency'),ylabel('Amplitude'), title('Optimum Filteration Output')
hold on
plot(t,yResample)

%plays the sound in matlab and writes it to a new file
sound(normSound, fs)
audiowrite('Filtered Sound.wav', normSound, fs);

end
